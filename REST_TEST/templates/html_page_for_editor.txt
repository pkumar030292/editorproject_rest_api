<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dynamic HLD Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;ch
            padding: 0;
            background-color: #f4f4f4;
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            gap: 2px;
            padding: 20px;
            width: 30%;
            box-sizing: border-box;
        }

        .section {
            flex: 1 1 400px; /* grow, shrink, min width */
            padding: 20px;
            border: 2px solid #ccc;
            border-radius: 10px;
            background-color: #fff;
            display: flex;
            flex-direction: column;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        h1, h2, h5 {
            margin-top: 0;
        }

        label, select, textarea, input, button, pre {
            margin-bottom: 10px;
            width: 100%;
        }

        textarea, select, pre, input {
            box-sizing: border-box;
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        button {
            padding: 10px;
            cursor: pointer;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
        }

        button:hover {
            background-color: #0056b3;
        }

        pre {
            background-color: #eee;
            padding: 10px;
            overflow-x: auto;
        }

    </style>
</head>
<body>

    <h1 style="text-align:center; padding: 20px 0;">Dynamic HLD Generator</h1>

    <div class="container">

        <!-- Template & Dynamic Fields Section -->
        <div class="section">
            <h2>Generate Document</h2>

            <label for="template">Select Template:</label>
            <select id="template" name="template" onchange="loadSchema()">
                <option value="">-- Select Template --</option>
                {% for t in templates %}
                <option value="{{ t }}">{{ t }}</option>
                {% endfor %}
            </select>

            <div id="fields"></div>

            <button onclick="generateDoc()">Generate Document</button>
        </div>

        <!-- File Download Section -->
        <div class="section">
            <h2>Download Existing Files</h2>

            <label for="files">Select File:</label>
            <select id="files" onchange="window.location.href='/download/' + this.value">
                <option value="">-- Select File --</option>
                {% for f in files %}
                <option value="{{ f }}">{{ f }}</option>
                {% endfor %}
            </select>
        </div>

        <!-- Router Configuration Section -->
        <div class="section">
            <h2>Router Configuration</h2>

            <textarea id="routerInput" rows="8" placeholder="Enter router commands here..."></textarea>
            <pre id="routerOutput"></pre>
            <button onclick="sendRouterConfig()">Send Configuration</button>
        </div>

    </div>

    <script>
        async function loadSchema() {
            const template = document.getElementById("template").value;
            if (!template) return;

            try {
                const res = await fetch(`/template-schema?template=${template}`);
                const data = await res.json();

                const fieldsDiv = document.getElementById("fields");
                fieldsDiv.innerHTML = "";

                for (const key in data.fields) {
                    fieldsDiv.innerHTML += `
                        <label>${key}:</label>
                        <input type="text" id="${key}" name="${key}" /><br>
                    `;
                }
            } catch (err) {
                alert("Error loading template fields: " + err);
            }
        }

        async function generateDoc() {
            const template = document.getElementById("template").value;
            if (!template) {
                alert("Please select a template");
                return;
            }

            const inputs = document.querySelectorAll("#fields input");
            const fields = {};
            inputs.forEach(inp => fields[inp.id] = inp.value);

            try {
                const res = await fetch("/generate", {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({template, fields})
                });

                const data = await res.json();
                if (data.download_url) {
                    alert("Document generated successfully!");
                    window.location.reload();
                } else {
                    alert("Error: " + JSON.stringify(data));
                }
            } catch (err) {
                alert("Error generating document: " + err);
            }
        }

        // Example function for router config (implement backend)
        async function sendRouterConfig() {
            const commands = document.getElementById("routerInput").value;
            if (!commands) {
                alert("Enter router commands");
                return;
            }

            try {
                const res = await fetch("/router-config", {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({commands})
                });

                const data = await res.json();
                document.getElementById("routerOutput").textContent = data.output || "No output";
            } catch (err) {
                document.getElementById("routerOutput").textContent = "Error: " + err;
            }
        }
    </script>
<!-- Template Upload Section -->
<div style="border: 1px solid #ddd; padding: 16px; border-radius: 8px; margin-top: 20px;">
    <h3>üìÇ Upload New Template</h3>
    <form id="uploadForm" enctype="multipart/form-data">
        <input type="file" id="templateFile" name="file" accept=".docx,.j2,.yaml,.yml,.json,.cfg,.ini,.tmpl,.txt" required>
        <button type="submit" style="margin-left: 10px;">Upload</button>
    </form>
    <p id="uploadStatus" style="margin-top: 10px; color: green;"></p>
</div>

<script>
document.getElementById("uploadForm").addEventListener("submit", async function(e) {
    e.preventDefault(); // stop normal form submission

    const fileInput = document.getElementById("templateFile");
    if (!fileInput.files.length) {
        alert("Please select a file to upload.");
        return;
    }

    const formData = new FormData();
    formData.append("file", fileInput.files[0]);

    try {
        const response = await fetch("/templates/upload", {
            method: "POST",
            body: formData
        });

        const result = await response.json();
        if (response.ok) {
            document.getElementById("uploadStatus").textContent =
                `‚úÖ Uploaded: ${result.filename} (${result.size} bytes)`;
        } else {
            document.getElementById("uploadStatus").textContent =
                `‚ùå Error: ${result.detail || "Upload failed"}`;
            document.getElementById("uploadStatus").style.color = "red";
        }
    } catch (err) {
        document.getElementById("uploadStatus").textContent =
            "‚ùå Network error: " + err;
        document.getElementById("uploadStatus").style.color = "red";
    }
});
</script>

</body>
</html>
